{"version":3,"sources":["remixClient.js","PackageDetailView.js","App.js","serviceWorker.js","index.js"],"names":["remixClient","createIframeClient","customApi","remixApi","devMode","port","PackageDetailView","className","packageInfo","name","version","description","Prettier","lazy","App","fallback","client","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+uCAOeA,EALKC,6BAAmB,CACrCC,UAAWC,WACXC,QAAS,CAACC,KAAM,Q,OCoBHC,EAnBW,kBACxB,yBAAKC,UAAU,uBACb,wBAAIA,UAAU,MACXC,EAAYC,KADf,IACqB,+BAAQD,EAAYE,UAEzC,uBAAGH,UAAU,cAAcC,EAAYG,eCNrCC,EAAWC,eAAK,kBAAM,sDAebC,EAbH,kBACV,yBAAKP,UAAU,eACb,6BAASA,UAAU,WACjB,kBAAC,EAAD,OAEF,6BAASA,UAAU,8BACjB,kBAAC,WAAD,CAAUQ,SAAU,4CAClB,kBAACH,EAAD,CAAUI,OAAQhB,QCDNiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.c9b45f86.chunk.js","sourcesContent":["import {createIframeClient, remixApi} from \"remix-plugin\";\n\nconst remixClient = createIframeClient({\n  customApi: remixApi,\n  devMode: {port: 8080}\n});\n\nexport default remixClient;\n","import React from \"react\";\nimport packageInfo from \"../package.json\";\n// import packagePrettierInfo from \"../node_modules/prettier-plugin-solidity/package.json\";\n// import packageRemixInfo from \"../node_modules/remix-plugin/package.json\";\n\nconst PackageDetailView = () => (\n  <div className=\"jumbotron py-3 mb-0\">\n    <h1 className=\"h5\">\n      {packageInfo.name} <small>{packageInfo.version}</small>\n    </h1>\n    <p className=\"lead small\">{packageInfo.description}</p>\n    {\n      //<hr className=\"my-4\" />\n      // <h2 className=\"h6\">Dependencies</h2>\n      // <h3 className=\"h6\">\n      //   {packagePrettierInfo.name} <small>{packagePrettierInfo.version}</small>\n      // </h3>\n      // <h3 className=\"h6\">\n      //   {packageRemixInfo.name} <small>{packageRemixInfo.version}</small>\n      // </h3>\n    }\n  </div>\n);\n\nexport default PackageDetailView;\n","import React, {lazy, Suspense} from \"react\";\nimport remixClient from \"./remixClient\";\nimport PackageDetailView from \"./PackageDetailView\";\n\nconst Prettier = lazy(() => import(\"./Prettier\"));\n\nconst App = () => (\n  <div className=\"panels-item\">\n    <section className=\"section\">\n      <PackageDetailView />\n    </section>\n    <section className=\"section settings-panel p-2\">\n      <Suspense fallback={<div>Loading...</div>}>\n        <Prettier client={remixClient} />\n      </Suspense>\n    </section>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"bootstrap/dist/css/bootstrap.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}